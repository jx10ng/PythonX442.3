"""Question 1: Write a simple Rectangle class. It should do the following:
- Accepts length and width as parameters when creating a new instance
- Has a perimeter method that returns the perimeter of the rectangle
- Has an area method that returns the area of the rectangle
- Don't worry about coordinates or negative values, etc."""

class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def perimieter(self):
        """Returns the perimeter of the Rectangle."""
        return (self.length * 2) + (self.width * 2)

    def area(self):
        """Returns the area of the Rectangle."""
        return self.length * self.width

    def __repr__(self):
        return ('<Rectangle> length: {}, width: {}, perimeter: {}, area: {}'
                .format(self.length, self.width, self.perimieter(),
                        self.area()))


def main():
    r = Rectangle(4, 7)
    print(r)

    r = Rectangle(25, 76)
    print(r)


if __name__ == '__main__':
    main()


"""Question 2: Python provides several modules to allow you to easily extend some of the basic objects in the language. 
Among these modules are UserDict, UserList, and UserString. (Refer to the chart in Topic 10.3 to see what 
the methods you need to override look like. Also, since UserDict and UserList are part of the collection module, 
you can import them using from collections import UserDict and from collections import UserList.)


Using the UserList module, create a class called Ulist, and override the __add__, append, and extend methods 
so that duplicate values will not be added to the list by any of these operations."""

from collections import UserList


class Ulist(UserList):
    def __add__(self, list):
        new_values = []

        for value in list:
            if value not in self:
                new_values.append(value)

        return super(Ulist, self).__add__(new_values)

    def append(self, value):
        if value not in self:
            return super(Ulist, self).append(value)

    def extend(self, list):
        for value in list:
            if value not in self:
                self.append(value)


def main():
    l = Ulist()

    l.append(1)
    l.append(2)
    l.append(1)
    l = l + [1, 2, 3, 4]
    l.extend([5, 6, 7])

    print(l)


if __name__ == '__main__':
    main()


"""Question 3: (Extra Credit) Using the UserDict module, create a class called Odict, which will be just like a 
dictionary but will "remember" the order in which key/value pairs are added to the dictionary. 
(Hint: Override the built-in __setitem__ method.) 
Create a new method for the Odict object called okeys, which will return the ordered keys."""

from collections import UserDict

class Odict(UserDict):
    ordered_keys = []

    def __setitem__(self, key, item):
        # Save the key to ordered_keys, since a List will keep order.
        self.ordered_keys.append(key)

        # Put the value into the dict
        return super(Odict, self).__setitem__(key, item)

    def okeys(self):
        return self.ordered_keys

def main():
    d = Odict()

    d[1] = 'one'
    d[0] = 'zero'
    d[5] = 'five'
    d[2] = 'two'

    print('dict: {}, okeys: {}'.format(d, d.okeys()))


if __name__ == '__main__':
    main()
